<?php

namespace Benmacha\TemplateBundle\Repository;
use Doctrine\ORM\EntityRepository;
use Doctrine\ORM\Query\Expr;
/**
 * ModelRepository.
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */

abstract class BaseRepository extends EntityRepository
{
    public function ajaxTable($request)
    {
        if (isset($request['columns'])) {
            $column = '';
            foreach ($request['columns'] as $colums) {
                if ('true' == $colums['searchable'] and false === strpos($column, $colums['name'])) {
                    $column .= $colums['name'].' AS '.$colums['data'].',';
                }
            }
        } else {
            $column = 't';
        }
        if (isset($request['hiddenColumn'])) {
            foreach ($request['hiddenColumn'] as $colums) {
                if (false === strpos($column, $colums['name'])) {
                    $column .= $colums['name'].' AS '.$colums['data'].',';
                }
            }
        }

        $qb = $this->createQueryBuilder('t')->select(rtrim($column, ','));
        $total = $this->createQueryBuilder('t')->select('count(t.id)');

        $FilteredTotal = clone $total;

        if (isset($request['join'])) {
            foreach ($request['join'] as $join) {
                $qb->innerJoin($join['join'], $join['alias'], Expr\Join::WITH, $join['condition']);
                $FilteredTotal->innerJoin($join['join'], $join['alias'], Expr\Join::WITH, $join['condition']);
            }
        }
        if (isset($request['start']) and null != $request['start']) {
            $qb->setFirstResult((int) $request['start']);
        }

        if (isset($request['length']) and null != $request['length']) {
            $qb->setMaxResults((int) $request['length']);
        }

        if (isset($request['order'])) {
            foreach ($request['order'] as $order) {
                $qb->addOrderBy($request['columns'][$order['column']]['name'], $order['dir']);
            }
        }
        if (isset($request['condition'])) {
            foreach ($request['condition'] as $condition) {
                $qb->andWhere($condition);
            }
        }

        $search = [];
        if (isset($request['columns']) and isset($request['search']) and $request['search']['value'] != '') {
            foreach ($request['columns'] as $column) {
                if ('true' == $column['searchable']) {
                    $search[] = $qb->expr()->like($column['name'], '\'%'.$request['search']['value'].'%\'');
                }
            }
        }
        if (isset($request['hiddenColumn']) and isset($request['search']) and $request['search']['value'] != '') {
            foreach ($request['hiddenColumn'] as $column) {
                $search[] = $qb->expr()->like($column['name'], '\'%'.$request['search']['value'].'%\'');
            }
        }
        if (0 != count($search)) {
            $qb->andWhere(new Expr\Orx($search));
            $FilteredTotal->andWhere(new Expr\Orx($search));
        }

        try {
            $recordsTotal = $total->getQuery()->getSingleScalarResult();
        } catch (NonUniqueResultException $e) {
            $recordsTotal = 0;
        }
        try {
            $recordsFiltered = $FilteredTotal->getQuery()->getSingleScalarResult();
        } catch (NonUniqueResultException $e) {
            $recordsFiltered = 0;
        }

        $output = [
            'request' => $request,
            'draw' => $request['draw'],
            'recordsTotal' => $recordsTotal,
            'recordsFiltered' => $recordsFiltered,
            'data' => $qb->getQuery()->getScalarResult(),
        ];

        return $output;
    }
}